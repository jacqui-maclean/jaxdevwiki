{
  "categories": {
    "objects": [
      {
        "images": [
          "images/constructorAndFactoryFunctions.jpg",
          "images/FactoryFunction.jpg",
          "images/constructor.jpg"
        ],
        "extraText": "Examples of factory & constructor functions - these functions return an object. You can also define an object using an object literal, but this is not a function, and so would not lend itself to creating multiple objects with the same properties and methods.  Factory and constructor functions are a way of creating objects that share properties and methods, but also have their own unique properties and methods.",
        "tags": ["object", "constructor", "factory", "functions"],
        "slug": "objectConstructor",
        "title": "Factory and Constructor Functions",
        "category": "objects"
      },
      {
        "images": [],
        "extraText": "",
        "tags": ["function", "getters", "setters", "functions", "object"],
        "slug": "gettersAndSetters",
        "title": "Getters and Setters",
        "category": "objects"
      },
      {
        "images": ["images/polymorphism-and-inheritance.jpg"],
        "extraText": "",
        "tags": ["creation", "object", "polymorphism", "inheritance"],
        "slug": "polymorphismAndInheritance",
        "title": "Polymorphism and Inheritance",
        "category": "objects"
      },
      {
        "images": ["images/prototype-template.jpg"],
        "extraText": "Essentially assigning a new prototype to an object means that the object receives all the properties and methods of the prototype as a template to then build on top of.  This is a way of creating objects that share properties and methods, but also have their own unique properties and methods.",
        "tags": [
          "creation",
          "object",
          "polymorphism",
          "inheritance",
          "method",
          "prototype"
        ],
        "slug": "polymorphismAndPrototypes",
        "title": "Polymorphism and Prototypes",
        "category": "objects"
      },
      {
        "images": ["images/polymorphism-and-prototypes.jpg"],
        "extraText": "the method highest up in the tree will be called, eg if duplicate is called in the scenarioo below, then the method in the snowdrop prototype is the version that will be called  - this is because the method is not found in the snowdrop object, so it looks up the prototype chain until it finds it.",
        "tags": ["creation", "object", "polymorphism", "inheritance", "method"],
        "slug": "polymorphism-and-prototype",
        "title": "Polymorphism and Method Selection",
        "category": "objects"
      },
      {
        "images": [],
        "extraText": "This when you literally write out the object",
        "tags": ["objectCreation", "object", "literal"],
        "slug": "objectLiteral",
        "title": "Object Literal",
        "category": "objects"
      },

      {
        "images": ["images/objectEntries.jpg"],
        "extraText": "converts each property in an object into an key/value array",
        "tags": [
          "object",
          "methods",
          "entries",
          "objectMethods",
          "loops",
          "looping",
          "for-in",
          "loop"
        ],
        "slug": "objectEntries",
        "title": "Object Entries",
        "category": "objects"
      },
      {
        "images": ["images/forInForOfLoops.jpg"],
        "extraText": "ES6 introduced significant changes and enhancements to the JavaScript language, including features like arrow functions, classes, template literals, block-scoped variables (let and const), and more. It was a major update to the language and brought a lot of improvements for developers.",
        "tags": ["loops", "loops", "looping", "object", "array"],
        "slug": "loopsArrayVSObjects",
        "title": "Compare looping over Objects with Looping over Arrays",
        "category": "objects"
      },
      {
        "images": ["images/cloningObjects.jpg"],
        "extraText": "",
        "tags": ["cloning", "clone", "object"],
        "slug": "cloning",
        "title": "Cloning",
        "category": "objects"
      },
      {
        "images": [
          "images/valueVSreferenceTypes.jpg",
          "images/variablesDetail.jpg"
        ],
        "extraText": "",
        "tags": ["variables", "value", "reference", "types", "primitive"],
        "slug": "valueVSreference",
        "title": "Primitive/Value Types vs Reference Types",
        "category": "objects"
      },
      {
        "images": ["images/objectsOverview.jpg"],
        "extraText": "",
        "tags": ["variables", "object", "objects"],
        "slug": "objectOverview",
        "title": "Objects overview",
        "category": "objects"
      },
      {
        "images": ["images/loopingThruAnObject.jpg"],
        "extraText": "",
        "tags": ["loops", "loops", "object", "looping"],
        "slug": "loops",
        "title": "Looping over Objects",
        "category": "objects"
      }
    ],
    "functions": [
      {
        "images": ["node.jpg"],
        "extraText": "",
        "tags": ["function", "node", "Javascript"],
        "slug": "node",
        "title": "What is Node",
        "category": "functions"
      },
      {
        "images": ["images/ES7.png"],
        "extraText": "ECMA(2015) or ES6 introduced significant changes and enhancements to the JavaScript language, including features like arrow functions, classes, template literals, block-scoped variables (let and const).ECMA2016(ES7) introduced the includes() method for arrays, and the exponentiation operator.ECMA2017(ES8) introduced async functions, shared memory, and atomics, and Object.values() and Object.entries() methods.ECMA2018(ES9) introduced asynchronous iteration, rest/spread properties, and Promise.prototype.finally().ECMA2019(ES10) introduced Array.flat() and Array.flatMap() methods, and Object.fromEntries() method.ECMA2020(ES11) introduced the nullish coalescing operator (??), optional chaining operator (?.), and Promise.allSettled() method.ECMA2021(ES12) introduced the String.prototype.replaceAll() method, and the Promise.any() method. ECMA2022(ES13) introduced the String.prototype.at() method, and the Promise.any() method.ECMA2023(ES14) introduced the String.prototype.replaceAll() method, and the Promise.any() method.",
        "tags": ["function", "ES7", "functions", "ES6", "Javascript", "ECMA"],
        "slug": "ES6toES14",
        "title": "ES6 to ES14",
        "category": "functions"
      },
      {
        "images": ["images/FunctionArgumentObject.jpg"],
        "extraText": "",
        "tags": ["function", "argument", "functions"],
        "slug": "argumentObject",
        "title": "The argument object",
        "category": "functions"
      },
      {
        "images": ["images/errorHandlingTryCatch.jpg"],
        "extraText": "",
        "tags": [
          "function",
          "error-handling",
          "try",
          "catch",
          "error",
          "handling",
          "functions"
        ],
        "slug": "tryCatch",
        "title": "Error Handling - Try/Catch blocks",
        "category": "functions"
      },
      {
        "images": ["images/twoFuncsInTernaryCondition.png"],
        "extraText": "Wrap the two functions in braces and comma separate them",
        "tags": ["ternary", "two", "functions", "function", "syntax"],
        "slug": "combinedFunctionInTernary",
        "title": "How to call two functions in a ternary condition",
        "category": "functions"
      },

      {
        "images": ["images/arrowFunctionsAndThis.jpg"],
        "extraText": "",
        "tags": ["arrow", "functions", "this"],
        "slug": "arrow-function",
        "title": "Arrow Functions and This",
        "category": "functions"
      },
      {
        "images": ["images/functionDeclarationVSexpressions.jpg"],
        "extraText": "",
        "tags": ["function", "declaration", "expression", "functions"],
        "slug": "declarationAndExpression",
        "title": "Function Declarations and Expressions",
        "category": "functions"
      },
      {
        "images": ["images/Hoisting.jpg"],
        "extraText": "",
        "tags": ["function", "hoisting", "functions"],
        "slug": "hoisting",
        "title": "Hoisting",
        "category": "functions"
      },
      {
        "images": ["images/functionDefaultParameters.jpg"],
        "extraText": "",
        "tags": ["function", "default", "parameters", "params", "functions"],
        "slug": "defaultParams",
        "title": "Default Parameters",
        "category": "functions"
      },

      {
        "images": ["images/CallingTwoFunctionsOnClick.png"],
        "extraText": "",
        "tags": [
          "syntax",
          "functions",
          "function",
          "calling",
          "onClick",
          "click",
          "arrow",
          "event",
          "multiple",
          "two"
        ],
        "slug": "callingTwoFunctionsOnClick",
        "title": "Calling Two Functions onClick in an Arrow function",
        "category": "functions"
      },
      {
        "images": [
          "images/cssTransformonClickCss.png",
          "images/CssTransformOnClickJSX.png"
        ],
        "extraText": "",
        "tags": [
          "css",
          "transform",
          "animate",
          "animation",
          "onClick",
          "click",
          "transformations",
          "transition"
        ],
        "slug": "CssTransformOnClick",
        "title": "CSS Transform on Click, bounce/fade",
        "category": "functions"
      }
    ],
    "array": [
      {
        "images": ["images/arrayFilter.jpg"],
        "extraText": "in the example below - myArray is NOT mutated",
        "tags": ["arrayMethods", "array", "methods", "filter"],
        "slug": "Array.filter",
        "title": "Array.filter",
        "category": "array"
      },

      {
        "images": [],
        "extraText": "",
        "tags": ["arrayMethods", "array", "methods"],
        "slug": "Array.every",
        "title": "Array.every",
        "category": "array"
      },
      {
        "images": [],
        "extraText": "",
        "tags": ["arrayMethods", "array", "methods"],
        "slug": "Array.some",
        "title": "Array.some",
        "category": "array"
      },
      {
        "images": ["images/ArrayFind1a.png", "images/arrayFind.png"],
        "extraText": "Using find to check whether a matching element exists in an array, and returning that element if it does",
        "tags": ["arrayMethods", "array", "methods", "find"],
        "slug": "Array.find",
        "title": "Array.find",
        "category": "array"
      },

      {
        "images": ["images/arrayReduce.jpg"],
        "extraText": "",
        "tags": ["arrayMethods", "array", "methods", "reduce"],
        "slug": "Array.reduce",
        "title": "Array.reduce",
        "category": "array"
      },
      {
        "images": ["images/arraySort.jpg"],
        "extraText": "",
        "tags": ["arrayMethods", "array", "methods", "sort"],
        "slug": "Array.sort",
        "title": "Array.sort",
        "category": "array"
      }
    ],
    "variables": [
      {
        "images": ["images/var-hoisting.png"],
        "extraText": "important distinction in hoisting var is that the declaration is hoisted but not the assignment. Eg var is hoisted and available to the whole function, but it has no value assigned to it until it reaches the line of code that assigns the value - this line is not hoisted.",
        "tags": ["variables", "var", "let", "const"],
        "slug": "var-hoisting",
        "title": "Var declaration and hoisting",
        "category": "variables"
      },
      {
        "images": ["images/diffsBetweenVarLetConst.jpg"],
        "extraText": "",
        "tags": ["variables", "var", "let", "const"],
        "slug": "primitives",
        "title": "Diff between var, let and const",
        "category": "variables"
      },
      {
        "images": [],
        "extraText": "",
        "tags": ["variables", "object"],
        "slug": "reference",
        "title": "Reference Types",
        "category": "variables"
      }
    ],
    "ssh": [
      {
        "images": [
          "images/replacessh1of2.jpg",
          "images/ssh1.jpg",
          "images/replacingsshkeys.jpg",
          "images/ssh.jpg"
        ],
        "extraText": "",
        "tags": ["ssh", "key", "github", "git"],
        "slug": "ssh",
        "title": "Replace SSH keys",
        "category": "ssh"
      },
      {
        "images": ["images/sshkeymismatch.jpg"],
        "extraText": "",
        "tags": ["ssh", "key", "github", "git"],
        "slug": "sshkeymismatch",
        "title": "Mismatching SSH keys",
        "category": "ssh"
      },
      {
        "images": [
          "images/addsshkeypairtogithub.jpg",
          "images/addingsshkeypair2.jpg"
        ],
        "extraText": "",
        "tags": ["ssh", "key", "github", "git"],
        "slug": "addkeypairtogithub",
        "title": "Add SSH keys to github",
        "category": "ssh"
      },
      {
        "images": ["images/sshkeysfindingfile.jpg"],
        "extraText": "",
        "tags": ["ssh", "key", "github", "git"],
        "slug": "sshkeyfindingfile",
        "title": "Finding SSH keys",
        "category": "ssh"
      },
      {
        "images": ["images/installingsshkeys.jpg"],
        "extraText": "",
        "tags": ["ssh", "key", "github", "git"],
        "slug": "installsshkeys",
        "title": "Installing SSH Keys",
        "category": "ssh"
      }
    ],
    "git": [
      {
        "images": ["images/gitlabsetup1to4.jpg", "images/instruction5.jpg"],
        "extraText": "",
        "tags": ["git", "gitlab", "setup"],
        "slug": "setup gitlab",
        "title": "Setting up Gitlab",
        "category": "git"
      },
      {
        "images": ["images/hotfix.jpg"],
        "extraText": "",
        "tags": ["git", "hotfix"],
        "slug": "makehotfix",
        "title": "Making a hotfix",
        "category": "git"
      },
      {
        "images": ["images/CommitinTerminal.jpg"],
        "extraText": "",
        "tags": ["git", "commit", "terminal", "bash", "command"],
        "slug": "commitInTerminal",
        "title": "Commit from command line",
        "category": "git"
      },
      {
        "images": ["images/deployingvercel.jpg"],
        "extraText": "If your changes do not appear after push, use the refresh button on the project from the Vercel dashboard",
        "tags": ["git", "vercel", "deploy"],
        "slug": "deployingvercel",
        "title": "Deploy to Vercel",
        "category": "git"
      },
      {
        "images": ["images/makeRemoteRepo.jpg", "images/makeremote2.jpg"],
        "extraText": "",
        "tags": [
          "git",
          "remote",
          "repo",
          "commit",
          "terminal",
          "bash",
          "command"
        ],
        "slug": "makeRemoteRepo",
        "title": "Make Remote Repo",
        "category": "git"
      }
    ],
    "react": [
      {
        "images": [
          "images/react-query-overview.jpg",
          "images/reactQuery2.jpg",
          "images/reactQuery3.jpg"
        ],
        "extraText": "",
        "tags": ["react", "react-query"],
        "slug": "react-query-overview",
        "title": "React Query Overview",
        "category": "react"
      }
    ]
  }
}
